using namespace std;

/**
 *  In this client work with product through interface c=so all can use it.
 */
class Widget {
 public:
  virtual void draw() = 0;
};
class LinuxButton : public Widget {
 public:
  void draw() { cout << "LinuxButton\n"; }};
class LinuxMenu : public Widget {
 public:
  void draw() { cout << "LinuxMenu\n"; }
};
class WindowsButton : public Widget {
 public:
  void draw() { cout << "WindowsButton\n"; }
};
class WindowsMenu : public Widget {
 public:
  void draw() { cout << "WindowsMenu\n"; }
};

/**
 * Abstract factory defines methods.
 */
class Factory {
 public:
  virtual Widget *create_button() = 0;
  virtual Widget *create_menu() = 0;};

class LinuxFactory : public Factory {
 public:
  Widget *create_button() {
    return new LinuxButton;
  }
  Widget *create_menu() {
    return new LinuxMenu;
  }
};
class WindowsFactory : public Factory {
 public:
  Widget *create_button() {
    return new WindowsButton;
  }
  Widget *create_menu() {
    return new WindowsMenu;
  }};

class Client {
 private:
  Factory *factory;

 public:
  Client(Factory *f) {
    factory = f;
  }

  void draw() {
    Widget *w = factory->create_button();
    w->draw();
    display_window_one();
    display_window_two();
  }

  void display_window_one() {
    Widget *w[] = {
        factory->create_button(),
        factory->create_menu()
    };
    w[0]->draw();
    w[1]->draw();
  }

  void display_window_two() {
    Widget *w[] = {
        factory->create_menu(),
        factory->create_button()
    };
    w[0]->draw();
    w[1]->draw();
  }};

/**
 * here switch statment is replaced and create a proper factory. Usually that's
 * happening somewhere in program initialization code.
 */
int main() {
  Factory *factory;
#ifdef LINUX
  factory = new LinuxFactory;
#else // WINDOWS
  factory = new WindowsFactory;
#endif

  Client *c = new Client(factory);
  c->draw();
}
